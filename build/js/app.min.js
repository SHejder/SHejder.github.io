(function () {
    'use strict';

    let getData = {
        name: function () {
            let arr = ['Иван', 'Степан', 'Сергей', 'Ирина', 'Виктория', 'Светлана'];
            return arr[getData.randomInt(arr.length - 1)]

        },

        email: function () {
            let arr = ['test@darvin-studio.ru', 'darvin@yandex.ru', 'darvin@gmail.com', 'darvin@bk.ru'];

            return arr[getData.randomInt(arr.length - 1)]
        },

        randomInt: function (max) {
            let min = 0;
            max = Math.floor(max);
            return Math.floor(Math.random() * (max - min + 1)) + min;
        },

        phone: function () {
            let arr = [89009009090, '+78954566235', 89201002020];

            return arr[getData.randomInt(arr.length - 1)]
        },
        textarea: function () {
            let arr = ['This is the test!', 'Hi! It\'s a test!'];

            return arr[getData.randomInt(arr.length - 1)]
        },
        text: function () {
            let arr = ['This is the test!', 'Hi! It\'s a test!'];

            return arr[getData.randomInt(arr.length - 1)]
        },
        number:function () {
            return getData.randomInt(100)
        }
    };

    let check = {
        name: function ($input) {
            let name = $input.attr('name').toLowerCase();
            if (name !== undefined) {
                if (~name.indexOf('phone')) {
                    return 'isPhone'
                } else if (~name.indexOf('name')) {
                    return 'isName'
                } else if (~name.indexOf('email')) {
                    return 'isEmail'
                } else {
                    return false
                }
            } else {
                return false
            }

        },

        action: function ($form) {
            if ($form.attr('action') !== undefined){
                let action = $form.attr('action');
                if (~action.indexOf('search')) {
                    return 'isSearch'
                } else {
                    return false
                }
            }
        },

        type: function ($input) {
            let type = $input.attr('type');
            if  (type === 'email') {
                return 'isEmail'
            } else if (type === 'text') {
                return 'isText'
            } else if (type === 'number') {
                return type
            } else if (type === 'phone') {
                return 'isPhone'
            } else if (type === 'submit') {
                return type
            } else {
                return false
            }
        }

    };

    /**
     *
     * @return {string}
     */
    function Type($input) {
        let name = check.name($input);
        let type = check.type($input);
        if (type === 'isEmail') {
            return 'email'
        } else if (type === 'isText') {
            if (name === 'isName') {
                return 'name'
            } else if (name === 'isPhone') {
                return 'phone'
            }else if (name === 'isEmail') {
                return 'email'
            } else {
                return 'text'
            }
        } else if (type === 'submit') {
            return type
        } else if (type === 'number') {
            return type
        } else {
            return ''
        }
    }

    let fill = {
        field: function ($field, type) {
            if (type === 'email') {
                $field.val(getData.email);
            } else if (type === 'text') {
                $field.val(getData.text);
            } else if (type === 'phone') {
                $field.val(getData.phone);
            } else if (type === 'name') {
                $field.val(getData.name);
            } else if (type === 'textarea') {
                $field.val(getData.textarea);
            } else if (type === 'number') {
                $field.val(getData.number);
            } else {
                return false
            }

        },

        required: function ($this) {
            $this.find('textarea').each(function () {
                let $textarea = $(this);
                if ($textarea.attr('required') !== undefined) {
                    fill.field($textarea, 'textarea');
                    $textarea.change();
                    $textarea.blur();

                }
            });

            $this.find('input').each(function () {

                let $input = $(this);
                let type = Type($input);


                if (type !== 'submit' && $input.is(':visible')) {
                    $input.val('');
                }


                if ($input.attr('required') !== undefined && $input.is(':visible')) {
                    fill.field($input, type);
                    $input.change();
                    $input.blur();
                }
            });

        },

        all: function ($this) {

            $this.find('textarea').each(function () {
                let $textarea = $(this);
                fill.field($textarea, 'textarea');
                $textarea.change();
                $textarea.blur();

            });
            $this.find('input').each(function () {

                let $input = $(this);
                let type = Type($input);


                if (type !== 'submit' && $input.is(':visible')) {
                    $input.val('');
                }


                if ($input.is(':visible')) {
                    fill.field($input, type);
                    $input.change();
                    $input.blur();

                }
            });


        }
    };

    (function ($) {

        // let screenWidth = $(window).width();
        let defaults = {
            // дефолтные опции

            appPath: 'https://shejder.github.io/build/js',

            template: function () {
                return `
                <div class="test-wrap" >
                    <div class="top-wrapper">
                        <select class="fixture-type">
                            <option value="">Как заполнить поля?</option>   
                            <option value="required">Только обязательные</option>  
                            <option value="all">Все доступные</option>  
                        </select>
                        <div class="switcher close"><img src="`+defaults.appPath+`/img/arrow-down-left.svg" alt="open" title="Click to open"></div>                      
                    </div>
                    <button type="button">Заполнить</button> 
                </div>`
            }
        };
        //


        $('form').each(function () {

            let $this = $(this);


            //проверяем наличие виджета на странице
            if ($this.find('.test-wrap')) {
                $this.find('.test-wrap').remove();
            }

            //добавляем виджет
            if (check.action($this) !== 'isSearch' && $this.find('input').length > 1) {
                $this.append(defaults.template);
            }
            $this.css({
                position: 'relative'
            });


            let $widget = $this.find('.test-wrap');
            let $switcher = $widget.find('.switcher');
            let val;

            $switcher.on('click',function () {
                if ($switcher.hasClass('close')){
                    $switcher.removeClass('close');

                    $widget.css({
                        width: 'auto',
                        height: 'auto',
                        left: /*position*/'57%',
                    });
                    $switcher.css({
                        margin: 'auto 10px'
                    });
                    if($widget.find('.fixture-type').val() !== ''){
                        $widget.find('button').toggle();
                    }

                    $switcher.find('img').attr('src', defaults.appPath+'/img/arrow-up-right.svg');
                    $switcher.find('img').attr('title', 'Click to close');
                    $switcher.find('img').attr('alt', 'close');
                    $widget.find('select').toggle();


                    $switcher.addClass('open');
                } else if ($switcher.hasClass('open')) {
                    $switcher.removeClass('open');
                    if($widget.find('.fixture-type').val() !== ''){
                        $widget.find('button').toggle();
                    }

                    $widget.css({
                        width: '32px',
                        height: '32px',
                        left: /*position*/'94%',

                    });
                    $switcher.css({
                        margin: 'auto'

                    });

                    $switcher.find('img').attr('src', defaults.appPath+'/img/arrow-down-left.svg');
                    $switcher.find('img').attr('title', 'Click to open');
                    $switcher.find('img').attr('alt', 'open');


                    $widget.find('select').toggle();

                    $switcher.addClass('close');

                }

            });

            $widget.find('.fixture-type').on('change', function () {

                let $select = $(this);
                val = $select.val();
                if ($widget.find('button').is(':hidden')){
                    $widget.find('button').toggle();
                }


            });


            $widget.find('button').on('click', function () {
                let $button = $(this);
                $button.text('Перезаполнить');
                if (val === 'required') {

                    fill.required($this);

                } else if (val === 'all') {

                    fill.all($this);

                }
            });



            //положение виджета
            // let position;
            // if ($this.width() === screenWidth) {
            //      position = '85%';
            // } else {
            //     position = '110%';
            // }


            //стили виджета
            $widget.css({
                position: 'absolute',
                top: 0,
                left: /*position*/'94%',
                backgroundColor: '#f5f5f5',
                opacity: 0.9,
                border: '2px solid black',
                borderRadius: '2px',
                zIndex: 999999,
                width: '32px',
                height: '32px'

            });

            $widget.find('select').css({
                margin: '10px',
                width: 'auto',
                padding: '4px',
                height: 'auto',
                display: 'none'

            });

            $widget.find('button').css({
                margin: '10px 20px',
                padding: '4px',
                display: 'none'
            });

            $widget.find('.switcher').css({
                padding: '4px',
                width: '28px',
                height: '28px',
                display: 'block',
                border: '1px solid black'
            });

            $widget.find('.top-wrapper').css({
                display: 'flex',
                verticalAlign: 'baseline',
                justifyContent: 'space-around',
            });


        });
    })(jQuery);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZHVsZXMvZGF0YVByb3ZpZGVycy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2NoZWNrZXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9maWVsZC10eXBlcy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2ZpbGxlci5qcyIsIi4uLy4uL3NyYy9hcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGxldCBnZXREYXRhID0ge1xyXG4gICAgbmFtZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCBhcnIgPSBbJ9CY0LLQsNC9JywgJ9Ch0YLQtdC/0LDQvScsICfQodC10YDQs9C10LknLCAn0JjRgNC40L3QsCcsICfQktC40LrRgtC+0YDQuNGPJywgJ9Ch0LLQtdGC0LvQsNC90LAnXTtcclxuICAgICAgICByZXR1cm4gYXJyW2dldERhdGEucmFuZG9tSW50KGFyci5sZW5ndGggLSAxKV1cclxuXHJcbiAgICB9LFxyXG5cclxuICAgIGVtYWlsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGV0IGFyciA9IFsndGVzdEBkYXJ2aW4tc3R1ZGlvLnJ1JywgJ2RhcnZpbkB5YW5kZXgucnUnLCAnZGFydmluQGdtYWlsLmNvbScsICdkYXJ2aW5AYmsucnUnXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFycltnZXREYXRhLnJhbmRvbUludChhcnIubGVuZ3RoIC0gMSldXHJcbiAgICB9LFxyXG5cclxuICAgIHJhbmRvbUludDogZnVuY3Rpb24gKG1heCkge1xyXG4gICAgICAgIGxldCBtaW4gPSAwO1xyXG4gICAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcclxuICAgIH0sXHJcblxyXG4gICAgcGhvbmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsZXQgYXJyID0gWzg5MDA5MDA5MDkwLCAnKzc4OTU0NTY2MjM1JywgODkyMDEwMDIwMjBdO1xyXG5cclxuICAgICAgICByZXR1cm4gYXJyW2dldERhdGEucmFuZG9tSW50KGFyci5sZW5ndGggLSAxKV1cclxuICAgIH0sXHJcbiAgICB0ZXh0YXJlYTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCBhcnIgPSBbJ1RoaXMgaXMgdGhlIHRlc3QhJywgJ0hpISBJdFxcJ3MgYSB0ZXN0ISddO1xyXG5cclxuICAgICAgICByZXR1cm4gYXJyW2dldERhdGEucmFuZG9tSW50KGFyci5sZW5ndGggLSAxKV1cclxuICAgIH0sXHJcbiAgICB0ZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGV0IGFyciA9IFsnVGhpcyBpcyB0aGUgdGVzdCEnLCAnSGkhIEl0XFwncyBhIHRlc3QhJ107XHJcblxyXG4gICAgICAgIHJldHVybiBhcnJbZ2V0RGF0YS5yYW5kb21JbnQoYXJyLmxlbmd0aCAtIDEpXVxyXG4gICAgfSxcclxuICAgIG51bWJlcjpmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldERhdGEucmFuZG9tSW50KDEwMClcclxuICAgIH1cclxufTtcclxuIiwiZXhwb3J0IGxldCBjaGVjayA9IHtcclxuICAgIG5hbWU6IGZ1bmN0aW9uICgkaW5wdXQpIHtcclxuICAgICAgICBsZXQgbmFtZSA9ICRpbnB1dC5hdHRyKCduYW1lJykudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICh+bmFtZS5pbmRleE9mKCdwaG9uZScpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2lzUGhvbmUnXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAofm5hbWUuaW5kZXhPZignbmFtZScpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2lzTmFtZSdcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh+bmFtZS5pbmRleE9mKCdlbWFpbCcpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2lzRW1haWwnXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9LFxyXG5cclxuICAgIGFjdGlvbjogZnVuY3Rpb24gKCRmb3JtKSB7XHJcbiAgICAgICAgaWYgKCRmb3JtLmF0dHIoJ2FjdGlvbicpICE9PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gJGZvcm0uYXR0cignYWN0aW9uJyk7XHJcbiAgICAgICAgICAgIGlmICh+YWN0aW9uLmluZGV4T2YoJ3NlYXJjaCcpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2lzU2VhcmNoJ1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHR5cGU6IGZ1bmN0aW9uICgkaW5wdXQpIHtcclxuICAgICAgICBsZXQgdHlwZSA9ICRpbnB1dC5hdHRyKCd0eXBlJyk7XHJcbiAgICAgICAgaWYgICh0eXBlID09PSAnZW1haWwnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnaXNFbWFpbCdcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2lzVGV4dCdcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlXHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncGhvbmUnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnaXNQaG9uZSdcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdWJtaXQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufTtcclxuIiwiaW1wb3J0IHtjaGVja30gZnJvbSBcIi4vY2hlY2tlclwiO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBUeXBlKCRpbnB1dCkge1xyXG4gICAgbGV0IG5hbWUgPSBjaGVjay5uYW1lKCRpbnB1dCk7XHJcbiAgICBsZXQgdHlwZSA9IGNoZWNrLnR5cGUoJGlucHV0KTtcclxuICAgIGlmICh0eXBlID09PSAnaXNFbWFpbCcpIHtcclxuICAgICAgICByZXR1cm4gJ2VtYWlsJ1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnaXNUZXh0Jykge1xyXG4gICAgICAgIGlmIChuYW1lID09PSAnaXNOYW1lJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJ25hbWUnXHJcbiAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnaXNQaG9uZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdwaG9uZSdcclxuICAgICAgICB9ZWxzZSBpZiAobmFtZSA9PT0gJ2lzRW1haWwnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnZW1haWwnXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICd0ZXh0J1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N1Ym1pdCcpIHtcclxuICAgICAgICByZXR1cm4gdHlwZVxyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIHJldHVybiB0eXBlXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQge2dldERhdGF9IGZyb20gXCIuL2RhdGFQcm92aWRlcnNcIjtcclxuaW1wb3J0IHtUeXBlfSBmcm9tIFwiLi9maWVsZC10eXBlc1wiO1xyXG5cclxuZXhwb3J0IGxldCBmaWxsID0ge1xyXG4gICAgZmllbGQ6IGZ1bmN0aW9uICgkZmllbGQsIHR5cGUpIHtcclxuICAgICAgICBpZiAodHlwZSA9PT0gJ2VtYWlsJykge1xyXG4gICAgICAgICAgICAkZmllbGQudmFsKGdldERhdGEuZW1haWwpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3RleHQnKSB7XHJcbiAgICAgICAgICAgICRmaWVsZC52YWwoZ2V0RGF0YS50ZXh0KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdwaG9uZScpIHtcclxuICAgICAgICAgICAgJGZpZWxkLnZhbChnZXREYXRhLnBob25lKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICduYW1lJykge1xyXG4gICAgICAgICAgICAkZmllbGQudmFsKGdldERhdGEubmFtZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndGV4dGFyZWEnKSB7XHJcbiAgICAgICAgICAgICRmaWVsZC52YWwoZ2V0RGF0YS50ZXh0YXJlYSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAkZmllbGQudmFsKGdldERhdGEubnVtYmVyKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgfSxcclxuXHJcbiAgICByZXF1aXJlZDogZnVuY3Rpb24gKCR0aGlzKSB7XHJcbiAgICAgICAgJHRoaXMuZmluZCgndGV4dGFyZWEnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0ICR0ZXh0YXJlYSA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgIGlmICgkdGV4dGFyZWEuYXR0cigncmVxdWlyZWQnKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxsLmZpZWxkKCR0ZXh0YXJlYSwgJ3RleHRhcmVhJyk7XHJcbiAgICAgICAgICAgICAgICAkdGV4dGFyZWEuY2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAkdGV4dGFyZWEuYmx1cigpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkdGhpcy5maW5kKCdpbnB1dCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbGV0ICRpbnB1dCA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgIGxldCB0eXBlID0gVHlwZSgkaW5wdXQpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlICE9PSAnc3VibWl0JyAmJiAkaW5wdXQuaXMoJzp2aXNpYmxlJykpIHtcclxuICAgICAgICAgICAgICAgICRpbnB1dC52YWwoJycpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKCRpbnB1dC5hdHRyKCdyZXF1aXJlZCcpICE9PSB1bmRlZmluZWQgJiYgJGlucHV0LmlzKCc6dmlzaWJsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxsLmZpZWxkKCRpbnB1dCwgdHlwZSk7XHJcbiAgICAgICAgICAgICAgICAkaW5wdXQuY2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAkaW5wdXQuYmx1cigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9LFxyXG5cclxuICAgIGFsbDogZnVuY3Rpb24gKCR0aGlzKSB7XHJcblxyXG4gICAgICAgICR0aGlzLmZpbmQoJ3RleHRhcmVhJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCAkdGV4dGFyZWEgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICBmaWxsLmZpZWxkKCR0ZXh0YXJlYSwgJ3RleHRhcmVhJyk7XHJcbiAgICAgICAgICAgICR0ZXh0YXJlYS5jaGFuZ2UoKTtcclxuICAgICAgICAgICAgJHRleHRhcmVhLmJsdXIoKTtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJHRoaXMuZmluZCgnaW5wdXQnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCAkaW5wdXQgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICBsZXQgdHlwZSA9IFR5cGUoJGlucHV0KTtcclxuXHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gJ3N1Ym1pdCcgJiYgJGlucHV0LmlzKCc6dmlzaWJsZScpKSB7XHJcbiAgICAgICAgICAgICAgICAkaW5wdXQudmFsKCcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmICgkaW5wdXQuaXMoJzp2aXNpYmxlJykpIHtcclxuICAgICAgICAgICAgICAgIGZpbGwuZmllbGQoJGlucHV0LCB0eXBlKTtcclxuICAgICAgICAgICAgICAgICRpbnB1dC5jaGFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICRpbnB1dC5ibHVyKCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcblxyXG4gICAgfVxyXG59OyIsImltcG9ydCB7ZmlsbH0gZnJvbSAnLi9tb2R1bGVzL2ZpbGxlcidcclxuaW1wb3J0IHtjaGVja30gZnJvbSBcIi4vbW9kdWxlcy9jaGVja2VyXCI7XHJcblxyXG4oZnVuY3Rpb24gKCQpIHtcclxuXHJcbiAgICAvLyBsZXQgc2NyZWVuV2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcclxuICAgIGxldCBkZWZhdWx0cyA9IHtcclxuICAgICAgICAvLyDQtNC10YTQvtC70YLQvdGL0LUg0L7Qv9GG0LjQuFxyXG5cclxuICAgICAgICBhcHBQYXRoOiAnaHR0cHM6Ly9zaGVqZGVyLmdpdGh1Yi5pby9idWlsZC9qcycsXHJcblxyXG4gICAgICAgIHRlbXBsYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGVzdC13cmFwXCIgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b3Atd3JhcHBlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZml4dHVyZS10eXBlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+0JrQsNC6INC30LDQv9C+0LvQvdC40YLRjCDQv9C+0LvRjz88L29wdGlvbj4gICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyZXF1aXJlZFwiPtCi0L7Qu9GM0LrQviDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdGL0LU8L29wdGlvbj4gIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImFsbFwiPtCS0YHQtSDQtNC+0YHRgtGD0L/QvdGL0LU8L29wdGlvbj4gIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN3aXRjaGVyIGNsb3NlXCI+PGltZyBzcmM9XCJgK2RlZmF1bHRzLmFwcFBhdGgrYC9pbWcvYXJyb3ctZG93bi1sZWZ0LnN2Z1wiIGFsdD1cIm9wZW5cIiB0aXRsZT1cIkNsaWNrIHRvIG9wZW5cIj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCI+0JfQsNC/0L7Qu9C90LjRgtGMPC9idXR0b24+IFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+YFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvL1xyXG5cclxuXHJcbiAgICAkKCdmb3JtJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCAkdGhpcyA9ICQodGhpcyk7XHJcblxyXG5cclxuICAgICAgICAvL9C/0YDQvtCy0LXRgNGP0LXQvCDQvdCw0LvQuNGH0LjQtSDQstC40LTQttC10YLQsCDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAgICBpZiAoJHRoaXMuZmluZCgnLnRlc3Qtd3JhcCcpKSB7XHJcbiAgICAgICAgICAgICR0aGlzLmZpbmQoJy50ZXN0LXdyYXAnKS5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v0LTQvtCx0LDQstC70Y/QtdC8INCy0LjQtNC20LXRglxyXG4gICAgICAgIGlmIChjaGVjay5hY3Rpb24oJHRoaXMpICE9PSAnaXNTZWFyY2gnICYmICR0aGlzLmZpbmQoJ2lucHV0JykubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAkdGhpcy5hcHBlbmQoZGVmYXVsdHMudGVtcGxhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkdGhpcy5jc3Moe1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgbGV0ICR3aWRnZXQgPSAkdGhpcy5maW5kKCcudGVzdC13cmFwJyk7XHJcbiAgICAgICAgbGV0ICRzd2l0Y2hlciA9ICR3aWRnZXQuZmluZCgnLnN3aXRjaGVyJyk7XHJcbiAgICAgICAgbGV0IHZhbDtcclxuXHJcbiAgICAgICAgJHN3aXRjaGVyLm9uKCdjbGljaycsZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoJHN3aXRjaGVyLmhhc0NsYXNzKCdjbG9zZScpKXtcclxuICAgICAgICAgICAgICAgICRzd2l0Y2hlci5yZW1vdmVDbGFzcygnY2xvc2UnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkd2lkZ2V0LmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAvKnBvc2l0aW9uKi8nNTclJyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJHN3aXRjaGVyLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAnYXV0byAxMHB4J1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZigkd2lkZ2V0LmZpbmQoJy5maXh0dXJlLXR5cGUnKS52YWwoKSAhPT0gJycpe1xyXG4gICAgICAgICAgICAgICAgICAgICR3aWRnZXQuZmluZCgnYnV0dG9uJykudG9nZ2xlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJHN3aXRjaGVyLmZpbmQoJ2ltZycpLmF0dHIoJ3NyYycsIGRlZmF1bHRzLmFwcFBhdGgrJy9pbWcvYXJyb3ctdXAtcmlnaHQuc3ZnJyk7XHJcbiAgICAgICAgICAgICAgICAkc3dpdGNoZXIuZmluZCgnaW1nJykuYXR0cigndGl0bGUnLCAnQ2xpY2sgdG8gY2xvc2UnKTtcclxuICAgICAgICAgICAgICAgICRzd2l0Y2hlci5maW5kKCdpbWcnKS5hdHRyKCdhbHQnLCAnY2xvc2UnKTtcclxuICAgICAgICAgICAgICAgICR3aWRnZXQuZmluZCgnc2VsZWN0JykudG9nZ2xlKCk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICRzd2l0Y2hlci5hZGRDbGFzcygnb3BlbicpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzd2l0Y2hlci5oYXNDbGFzcygnb3BlbicpKSB7XHJcbiAgICAgICAgICAgICAgICAkc3dpdGNoZXIucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcclxuICAgICAgICAgICAgICAgIGlmKCR3aWRnZXQuZmluZCgnLmZpeHR1cmUtdHlwZScpLnZhbCgpICE9PSAnJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgJHdpZGdldC5maW5kKCdidXR0b24nKS50b2dnbGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAkd2lkZ2V0LmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICczMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICczMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAvKnBvc2l0aW9uKi8nOTQlJyxcclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICRzd2l0Y2hlci5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogJ2F1dG8nXHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHN3aXRjaGVyLmZpbmQoJ2ltZycpLmF0dHIoJ3NyYycsIGRlZmF1bHRzLmFwcFBhdGgrJy9pbWcvYXJyb3ctZG93bi1sZWZ0LnN2ZycpO1xyXG4gICAgICAgICAgICAgICAgJHN3aXRjaGVyLmZpbmQoJ2ltZycpLmF0dHIoJ3RpdGxlJywgJ0NsaWNrIHRvIG9wZW4nKTtcclxuICAgICAgICAgICAgICAgICRzd2l0Y2hlci5maW5kKCdpbWcnKS5hdHRyKCdhbHQnLCAnb3BlbicpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAkd2lkZ2V0LmZpbmQoJ3NlbGVjdCcpLnRvZ2dsZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICRzd2l0Y2hlci5hZGRDbGFzcygnY2xvc2UnKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICR3aWRnZXQuZmluZCgnLmZpeHR1cmUtdHlwZScpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgJHNlbGVjdCA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgIHZhbCA9ICRzZWxlY3QudmFsKCk7XHJcbiAgICAgICAgICAgIGlmICgkd2lkZ2V0LmZpbmQoJ2J1dHRvbicpLmlzKCc6aGlkZGVuJykpe1xyXG4gICAgICAgICAgICAgICAgJHdpZGdldC5maW5kKCdidXR0b24nKS50b2dnbGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAkd2lkZ2V0LmZpbmQoJ2J1dHRvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0ICRidXR0b24gPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAkYnV0dG9uLnRleHQoJ9Cf0LXRgNC10LfQsNC/0L7Qu9C90LjRgtGMJyk7XHJcbiAgICAgICAgICAgIGlmICh2YWwgPT09ICdyZXF1aXJlZCcpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmaWxsLnJlcXVpcmVkKCR0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsID09PSAnYWxsJykge1xyXG5cclxuICAgICAgICAgICAgICAgIGZpbGwuYWxsKCR0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG5cclxuICAgICAgICAvL9C/0L7Qu9C+0LbQtdC90LjQtSDQstC40LTQttC10YLQsFxyXG4gICAgICAgIC8vIGxldCBwb3NpdGlvbjtcclxuICAgICAgICAvLyBpZiAoJHRoaXMud2lkdGgoKSA9PT0gc2NyZWVuV2lkdGgpIHtcclxuICAgICAgICAvLyAgICAgIHBvc2l0aW9uID0gJzg1JSc7XHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgcG9zaXRpb24gPSAnMTEwJSc7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuXHJcbiAgICAgICAgLy/RgdGC0LjQu9C4INCy0LjQtNC20LXRgtCwXHJcbiAgICAgICAgJHdpZGdldC5jc3Moe1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICBsZWZ0OiAvKnBvc2l0aW9uKi8nOTQlJyxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2Y1ZjVmNScsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuOSxcclxuICAgICAgICAgICAgYm9yZGVyOiAnMnB4IHNvbGlkIGJsYWNrJyxcclxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcclxuICAgICAgICAgICAgekluZGV4OiA5OTk5OTksXHJcbiAgICAgICAgICAgIHdpZHRoOiAnMzJweCcsXHJcbiAgICAgICAgICAgIGhlaWdodDogJzMycHgnXHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkd2lkZ2V0LmZpbmQoJ3NlbGVjdCcpLmNzcyh7XHJcbiAgICAgICAgICAgIG1hcmdpbjogJzEwcHgnLFxyXG4gICAgICAgICAgICB3aWR0aDogJ2F1dG8nLFxyXG4gICAgICAgICAgICBwYWRkaW5nOiAnNHB4JyxcclxuICAgICAgICAgICAgaGVpZ2h0OiAnYXV0bycsXHJcbiAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJHdpZGdldC5maW5kKCdidXR0b24nKS5jc3Moe1xyXG4gICAgICAgICAgICBtYXJnaW46ICcxMHB4IDIwcHgnLFxyXG4gICAgICAgICAgICBwYWRkaW5nOiAnNHB4JyxcclxuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICR3aWRnZXQuZmluZCgnLnN3aXRjaGVyJykuY3NzKHtcclxuICAgICAgICAgICAgcGFkZGluZzogJzRweCcsXHJcbiAgICAgICAgICAgIHdpZHRoOiAnMjhweCcsXHJcbiAgICAgICAgICAgIGhlaWdodDogJzI4cHgnLFxyXG4gICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxyXG4gICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgYmxhY2snXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICR3aWRnZXQuZmluZCgnLnRvcC13cmFwcGVyJykuY3NzKHtcclxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnYmFzZWxpbmUnLFxyXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWFyb3VuZCcsXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgIH0pO1xyXG59KShqUXVlcnkpO1xyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBQU8sSUFBSSxPQUFPLEdBQUc7SUFDckIsSUFBSSxJQUFJLEVBQUUsWUFBWTtJQUN0QixRQUFRLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNoRixRQUFRLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQzs7SUFFckQsS0FBSzs7SUFFTCxJQUFJLEtBQUssRUFBRSxZQUFZO0lBQ3ZCLFFBQVEsSUFBSSxHQUFHLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxjQUFjLENBQUMsQ0FBQzs7SUFFcEcsUUFBUSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckQsS0FBSzs7SUFFTCxJQUFJLFNBQVMsRUFBRSxVQUFVLEdBQUcsRUFBRTtJQUM5QixRQUFRLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNwQixRQUFRLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLFFBQVEsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ2pFLEtBQUs7O0lBRUwsSUFBSSxLQUFLLEVBQUUsWUFBWTtJQUN2QixRQUFRLElBQUksR0FBRyxHQUFHLENB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
