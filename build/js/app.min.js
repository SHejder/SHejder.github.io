(function () {
    'use strict';

    let getData = {
        name: function () {
            let arr = ['Иван', 'Стенпан', 'Сергей', 'Ирина', 'Виктория', 'Светлана'];
            return arr[getData.randomInt(arr.length - 1)]

        },

        email: function () {
            let arr = ['test@darvin-studio.ru', 'darvin@yandex.ru', 'darvin@gmail.com', 'darvin@bk.ru'];

            return arr[getData.randomInt(arr.length - 1)]
        },

        randomInt: function (max) {
            let min = 0;
            max = Math.floor(max);
            return Math.floor(Math.random() * (max - min + 1)) + min;
        },

        phone: function () {
            let arr = [89009009090, '+78954566235', 89201002020];

            return arr[getData.randomInt(arr.length - 1)]
        },
        textarea: function () {
            let arr = ['This is the test!', 'Hi! It\'s a test!'];

            return arr[getData.randomInt(arr.length - 1)]
        },
        text: function () {
            let arr = ['This is the test!', 'Hi! It\'s a test!'];

            return arr[getData.randomInt(arr.length - 1)]
        },
        number:function () {
            return getData.randomInt(100)
        }
    };

    let check = {
        name: function ($input) {
            let name = $input.attr('name');
            if (name !== undefined) {
                if (~name.indexOf('phone')) {
                    return 'isPhone'
                } else if (~name.indexOf('name')) {
                    return 'isName'
                } else if (~name.indexOf('email')) {
                    return 'isEmail'
                } else {
                    return false
                }
            } else {
                return false
            }

        },

        action: function ($form) {
            let action = $form.attr('action');
            if (~action.indexOf('search')) {
                return 'isSearch'
            } else {
                return false
            }
        },

        type: function ($input) {
            let type = $input.attr('type');
            if (type === 'hidden') {
                return 'isHidden'
            } else if (type === 'email') {
                return 'isEmail'
            } else if (type === 'text') {
                return 'isText'
            } else if (type === 'number') {
                return type
            } else if (type === 'phone') {
                return 'isPhone'
            } else if (type === 'submit') {
                return type
            } else {
                return false
            }
        }

    };

    /**
     *
     * @return {string}
     */
    function Type ($input) {
        let name = check.name($input);
        let type = check.type($input);
        if (type === 'isHidden') {
            return 'hidden'
        } else if (name === 'isEmail' || type === 'isEmail') {
            return 'email'
        } else if (name === 'isPhone' && type === 'isText') {
            return 'phone'
        } else if (type === 'isText' && name !== 'isPhone' && type !== 'isEmail' && name !== 'isName') {
            return 'text'
        } else if (type === 'submit') {
            return type
        } else if (name === 'isName' && type === 'isText') {
            return 'name'
        } else if (type === 'number') {
            return type
        } else {
            return ''
        }
    }

    let fill = {
        field: function ($field, type) {
            if (type === 'email') {
                $field.val(getData.email);
            } else if (type === 'text') {
                $field.val(getData.text);
            } else if (type === 'phone') {
                $field.val(getData.phone);
            } else if (type === 'name') {
                $field.val(getData.name);
            } else if (type === 'textarea') {
                $field.val(getData.textarea);
            } else if (type === 'number') {
                $field.val(getData.number);
            } else {
                return false
            }

        },

        required: function ($this) {
            $this.find('textarea').each(function () {
                let $textarea = $(this);
                if ($textarea.attr('required') !== undefined) {
                    fill.field($textarea, 'textarea');
                }
            });

            $this.find('input').each(function () {

                let $input = $(this);
                let type = Type($input);


                if (type !== 'submit') {
                    $input.val('');
                }


                if ($input.attr('required') !== undefined && type !== 'hidden') {
                    fill.field($input, type);
                }
            });

        },

        all: function ($this) {

            $this.find('textarea').each(function () {
                let $textarea = $(this);
                fill.field($textarea, 'textarea');
            });
            $this.find('input').each(function () {

                let $input = $(this);
                let type = Type($input);


                if (type !== 'submit') {
                    $input.val('');
                }


                if (type !== 'hidden') {
                    fill.field($input, type);
                }
            });


        }
    };

    (function ($) {

        // var screenWidth = $(window).width();
        var defaults = {
            // дефолтные опции
            template: function () {
                return `
                <div class="test-wrap" >                      
                    <select class="fixture-type">
                        <option value="">Как заполнить поля?</option>   
                        <option value="required">Только обязательные</option>  
                        <option value="all">Все доступные</option>  
                    </select>
                    <button type="button">Заполнить</button> 
                </div>`
            }
        };
        //


        let $body = $('body').css('position', 'relative');
        let $widget = $body.find('.test-wrap');

        $('form').each(function () {

            let $this = $(this);
            let position = $this.offset();
            console.log($this.offset());

            // $this.find('input')
            // if ($this.find('.test-wrap')) {
            //     $this.find('.test-wrap').remove();
            // }
            if (check.action($this) !== 'isSearch' && $this.find('input').length > 1) {
                $body.append(defaults.template);
            }

            //





            let val;

            $widget.find('.fixture-type').on('change', function () {

                let $select = $(this);
                val = $select.val();

                $widget.find('button').css({
                    display: 'block'
                });

            });


            $widget.find('button').on('click', function () {
                let $button = $(this);
                $button.text('Перезаполнить');
                if (val === 'required') {

                    fill.required($this);

                } else if (val === 'all') {

                    fill.all($this);

                }
            });


            // if ($this.width() === screenWidth) {
            //     position = '85%';
            // }

            $widget.css({
                position: 'absolute',
                top: position.top +'px',
                left: position.left +'px',
                backgroundColor: '#f5f5f5',
                opacity: 0.8,
                border: '2px solid black',
                borderRadius: '2px',
                zIndex: 999999
            });

            $widget.find('select').css({
                margin: '10px',
                width: 'auto',
                padding: '4px',
                height: 'auto'
            });

            $widget.find('button').css({
                margin: '10px auto',
                padding: '4px',
                width: 'auto',
                height: 'auto',
                display: 'none'
            });


        });
    })(jQuery);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
